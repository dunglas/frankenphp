---
name: Sanitizers
on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
permissions:
  contents: read
jobs:
  # Adapted from https://github.com/beberlei/hdrhistogram-php
  sanitizers:
    name: ${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sanitizer: ['asan', 'msan']
    env:
      CFLAGS: -g -O0 -fsanitize=${{ matrix.sanitizer == 'asan' && 'address' || 'memory' }}  -DZEND_TRACK_ARENA_ALLOC
      LDFLAGS: -fsanitize=${{ matrix.sanitizer == 'asan' && 'address' || 'memory' }}
      CC: clang
      CXX: clang++
      USE_ZEND_ALLOC: 0
    steps:
      -
        name: Remove local PHP
        run: sudo apt-get remove --purge --autoremove 'php*' 'libmemcached*'
      -
        uses: actions/checkout@v4
      -
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache-dependency-path: |
            go.sum 
            caddy/go.sum
      -
        name: Determine PHP version
        id: determine-php-version
        run: |
          curl -fsSL 'https://www.php.net/releases/index.php?json&max=1&version=8.3' -o version.json
          echo version="$(jq -r 'keys[0]') version.json" >> "$GITHUB_OUTPUT"
          echo archive="$(jq -r '.[] .source[] | select(.filename |endswith(".xz")) | "https://www.php.net/distributions/" + .filename' version.json)" >> "$GITHUB_OUTPUT"
      -
        name: Cache PHP
        id: cache-php
        uses: actions/cache@v4
        with:
          path: php/target
          key: php-sanitizers-${{ matrix.sanitizer }}-${{ runner.arch }}-${{ steps.determine-php-version.outputs.version }}
      -
        if: steps.cache-php.outputs.cache-hit != 'true'
        name: Compile PHP
        run: |
          mkdir php/
          curl -fsSL "${{ steps.determine-php-version.outputs.archive }}" | tar -Jx -C php --strip-components=1
          cd php/
          ./configure \
            CFLAGS="$CFLAGS" \
            LDFLAGS="$LDFLAGS" \
            --enable-debug \
            --enable-embed \
            --enable-zts \
            --disable-zend-signals \
            --disable-cli \
            --disable-cgi \
            --disable-phpdbg \
            --prefix="$(pwd)/target/"
          make -j"$(getconf _NPROCESSORS_ONLN)"
          sudo make install
      -
        name: Add PHP to the PATH
        run: |
          echo "$(pwd)/php/target/bin" >> "$GITHUB_PATH"
      -
        name: Set environement variables
        run: |
          {
            echo "LIBRARY_PATH=$(pwd)/php/target/lib:$LIBRARY_PATH"
            echo "LD_LIBRARY_PATH=$(pwd)/php/target/lib:$LD_LIBRARY_PATH"
            echo "CGO_CFLAGS=$CFLAGS $(php-config --includes)"
            echo "CGO_LDFLAGS=$LDFLAGS -L$(pwd)/php/target/lib $(php-config --ldflags) $(php-config --libs)"
          } >> "$GITHUB_ENV"
      -
        name: Clear ld.so.cache
        run: |
          ls $(pwd)/php/target/lib
          sudo rm /etc/ld.so.cache
          sudo ldconfig
      -
        name: Compile
        run: go test -${{ matrix.sanitizer }} -v -x -c
      -
        name: Run tests
        run: ./frankenphp.test -test.v
